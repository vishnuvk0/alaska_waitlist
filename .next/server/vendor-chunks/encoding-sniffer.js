"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/encoding-sniffer";
exports.ids = ["vendor-chunks/encoding-sniffer"];
exports.modules = {

/***/ "(rsc)/./node_modules/encoding-sniffer/dist/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/encoding-sniffer/dist/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DecodeStream: () => (/* binding */ DecodeStream),\n/* harmony export */   decodeBuffer: () => (/* binding */ decodeBuffer),\n/* harmony export */   getEncoding: () => (/* reexport safe */ _sniffer_js__WEBPACK_IMPORTED_MODULE_2__.getEncoding)\n/* harmony export */ });\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var iconv_lite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! iconv-lite */ \"(rsc)/./node_modules/iconv-lite/lib/index.js\");\n/* harmony import */ var _sniffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sniffer.js */ \"(rsc)/./node_modules/encoding-sniffer/dist/esm/sniffer.js\");\nvar __extends = undefined && undefined.__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\n\n\n\n/**\n * Sniff the encoding of a buffer, then decode it.\n *\n * @param buffer Buffer to be decoded\n * @param options Options for the sniffer\n * @returns The decoded buffer\n */ function decodeBuffer(buffer, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return iconv_lite__WEBPACK_IMPORTED_MODULE_1__.decode(buffer, (0,_sniffer_js__WEBPACK_IMPORTED_MODULE_2__.getEncoding)(buffer, options));\n}\n/**\n * Decodes a stream of buffers into a stream of strings.\n *\n * Reads the first 1024 bytes and passes them to the sniffer. Once an encoding\n * has been determined, it passes all data to iconv-lite's stream and outputs\n * the results.\n */ var DecodeStream = /** @class */ function(_super) {\n    __extends(DecodeStream, _super);\n    function DecodeStream(options) {\n        var _a;\n        var _this = _super.call(this, {\n            decodeStrings: false,\n            encoding: \"utf-8\"\n        }) || this;\n        _this.buffers = [];\n        /** The iconv decode stream. If it is set, we have read more than `options.maxBytes` bytes. */ _this.iconv = null;\n        _this.readBytes = 0;\n        _this.sniffer = new _sniffer_js__WEBPACK_IMPORTED_MODULE_2__.Sniffer(options);\n        _this.maxBytes = (_a = options === null || options === void 0 ? void 0 : options.maxBytes) !== null && _a !== void 0 ? _a : 1024;\n        return _this;\n    }\n    DecodeStream.prototype._transform = function(chunk, _encoding, callback) {\n        if (this.readBytes < this.maxBytes) {\n            this.sniffer.write(chunk);\n            this.readBytes += chunk.length;\n            if (this.readBytes < this.maxBytes) {\n                this.buffers.push(chunk);\n                callback();\n                return;\n            }\n        }\n        this.getIconvStream().write(chunk, callback);\n    };\n    DecodeStream.prototype.getIconvStream = function() {\n        var _this = this;\n        if (this.iconv) {\n            return this.iconv;\n        }\n        var stream = iconv_lite__WEBPACK_IMPORTED_MODULE_1__.decodeStream(this.sniffer.encoding);\n        stream.on(\"data\", function(chunk) {\n            return _this.push(chunk, \"utf-8\");\n        });\n        stream.on(\"end\", function() {\n            return _this.push(null);\n        });\n        this.iconv = stream;\n        for(var _i = 0, _a = this.buffers; _i < _a.length; _i++){\n            var buffer = _a[_i];\n            stream.write(buffer);\n        }\n        this.buffers.length = 0;\n        return stream;\n    };\n    DecodeStream.prototype._flush = function(callback) {\n        this.getIconvStream().end(callback);\n    };\n    return DecodeStream;\n}(node_stream__WEBPACK_IMPORTED_MODULE_0__.Transform);\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/encoding-sniffer/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/encoding-sniffer/dist/esm/sniffer.js":
/*!***********************************************************!*\
  !*** ./node_modules/encoding-sniffer/dist/esm/sniffer.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ResultType: () => (/* binding */ ResultType),\n/* harmony export */   STRINGS: () => (/* binding */ STRINGS),\n/* harmony export */   Sniffer: () => (/* binding */ Sniffer),\n/* harmony export */   getEncoding: () => (/* binding */ getEncoding)\n/* harmony export */ });\n/* harmony import */ var whatwg_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! whatwg-encoding */ \"(rsc)/./node_modules/whatwg-encoding/lib/whatwg-encoding.js\");\n\n// https://html.spec.whatwg.org/multipage/syntax.html#prescan-a-byte-stream-to-determine-its-encoding\nvar State;\n(function(State) {\n    // Before anything starts; can be any of BOM, UTF-16 XML declarations or meta tags\n    State[State[\"Begin\"] = 0] = \"Begin\";\n    // Inside of a BOM\n    State[State[\"BOM16BE\"] = 1] = \"BOM16BE\";\n    State[State[\"BOM16LE\"] = 2] = \"BOM16LE\";\n    State[State[\"BOM8\"] = 3] = \"BOM8\";\n    // XML prefix\n    State[State[\"UTF16LE_XML_PREFIX\"] = 4] = \"UTF16LE_XML_PREFIX\";\n    State[State[\"BeginLT\"] = 5] = \"BeginLT\";\n    State[State[\"UTF16BE_XML_PREFIX\"] = 6] = \"UTF16BE_XML_PREFIX\";\n    // Waiting for opening `<`\n    State[State[\"BeforeTag\"] = 7] = \"BeforeTag\";\n    // After the opening `<`\n    State[State[\"BeforeTagName\"] = 8] = \"BeforeTagName\";\n    // After `</`\n    State[State[\"BeforeCloseTagName\"] = 9] = \"BeforeCloseTagName\";\n    // Beginning of a comment\n    State[State[\"CommentStart\"] = 10] = \"CommentStart\";\n    // End of a comment\n    State[State[\"CommentEnd\"] = 11] = \"CommentEnd\";\n    // A tag name that could be `meta`\n    State[State[\"TagNameMeta\"] = 12] = \"TagNameMeta\";\n    // A tag name that is not `meta`\n    State[State[\"TagNameOther\"] = 13] = \"TagNameOther\";\n    // XML declaration\n    State[State[\"XMLDeclaration\"] = 14] = \"XMLDeclaration\";\n    State[State[\"XMLDeclarationBeforeEncoding\"] = 15] = \"XMLDeclarationBeforeEncoding\";\n    State[State[\"XMLDeclarationAfterEncoding\"] = 16] = \"XMLDeclarationAfterEncoding\";\n    State[State[\"XMLDeclarationBeforeValue\"] = 17] = \"XMLDeclarationBeforeValue\";\n    State[State[\"XMLDeclarationValue\"] = 18] = \"XMLDeclarationValue\";\n    // Anything that looks like a tag, but doesn't fit in the above categories\n    State[State[\"WeirdTag\"] = 19] = \"WeirdTag\";\n    State[State[\"BeforeAttribute\"] = 20] = \"BeforeAttribute\";\n    /*\n     * Attributes in meta tag — we compare them to our set here, and back out\n     * We care about four attributes: http-equiv, content-type, content, charset\n     */ State[State[\"MetaAttribHttpEquiv\"] = 21] = \"MetaAttribHttpEquiv\";\n    // The value has to be `content-type`\n    State[State[\"MetaAttribHttpEquivValue\"] = 22] = \"MetaAttribHttpEquivValue\";\n    State[State[\"MetaAttribC\"] = 23] = \"MetaAttribC\";\n    State[State[\"MetaAttribContent\"] = 24] = \"MetaAttribContent\";\n    State[State[\"MetaAttribCharset\"] = 25] = \"MetaAttribCharset\";\n    // Waiting for whitespace\n    State[State[\"MetaAttribAfterName\"] = 26] = \"MetaAttribAfterName\";\n    State[State[\"MetaContentValueQuotedBeforeEncoding\"] = 27] = \"MetaContentValueQuotedBeforeEncoding\";\n    State[State[\"MetaContentValueQuotedAfterEncoding\"] = 28] = \"MetaContentValueQuotedAfterEncoding\";\n    State[State[\"MetaContentValueQuotedBeforeValue\"] = 29] = \"MetaContentValueQuotedBeforeValue\";\n    State[State[\"MetaContentValueQuotedValueQuoted\"] = 30] = \"MetaContentValueQuotedValueQuoted\";\n    State[State[\"MetaContentValueQuotedValueUnquoted\"] = 31] = \"MetaContentValueQuotedValueUnquoted\";\n    State[State[\"MetaContentValueUnquotedBeforeEncoding\"] = 32] = \"MetaContentValueUnquotedBeforeEncoding\";\n    State[State[\"MetaContentValueUnquotedBeforeValue\"] = 33] = \"MetaContentValueUnquotedBeforeValue\";\n    State[State[\"MetaContentValueUnquotedValueQuoted\"] = 34] = \"MetaContentValueUnquotedValueQuoted\";\n    State[State[\"MetaContentValueUnquotedValueUnquoted\"] = 35] = \"MetaContentValueUnquotedValueUnquoted\";\n    State[State[\"AnyAttribName\"] = 36] = \"AnyAttribName\";\n    // After the name of an attribute, before the equals sign\n    State[State[\"AfterAttributeName\"] = 37] = \"AfterAttributeName\";\n    // After `=`\n    State[State[\"BeforeAttributeValue\"] = 38] = \"BeforeAttributeValue\";\n    State[State[\"AttributeValueQuoted\"] = 39] = \"AttributeValueQuoted\";\n    State[State[\"AttributeValueUnquoted\"] = 40] = \"AttributeValueUnquoted\";\n})(State || (State = {}));\nvar ResultType;\n(function(ResultType) {\n    // Byte order mark\n    ResultType[ResultType[\"BOM\"] = 0] = \"BOM\";\n    // User- or transport layer-defined\n    ResultType[ResultType[\"PASSED\"] = 1] = \"PASSED\";\n    // XML prefixes\n    ResultType[ResultType[\"XML_PREFIX\"] = 2] = \"XML_PREFIX\";\n    // Meta tag\n    ResultType[ResultType[\"META_TAG\"] = 3] = \"META_TAG\";\n    // XML encoding\n    ResultType[ResultType[\"XML_ENCODING\"] = 4] = \"XML_ENCODING\";\n    // Default\n    ResultType[ResultType[\"DEFAULT\"] = 5] = \"DEFAULT\";\n})(ResultType || (ResultType = {}));\nvar AttribType;\n(function(AttribType) {\n    AttribType[AttribType[\"None\"] = 0] = \"None\";\n    AttribType[AttribType[\"HttpEquiv\"] = 1] = \"HttpEquiv\";\n    AttribType[AttribType[\"Content\"] = 2] = \"Content\";\n    AttribType[AttribType[\"Charset\"] = 3] = \"Charset\";\n})(AttribType || (AttribType = {}));\nvar Chars;\n(function(Chars) {\n    Chars[Chars[\"NIL\"] = 0] = \"NIL\";\n    Chars[Chars[\"TAB\"] = 9] = \"TAB\";\n    Chars[Chars[\"LF\"] = 10] = \"LF\";\n    Chars[Chars[\"CR\"] = 13] = \"CR\";\n    Chars[Chars[\"SPACE\"] = 32] = \"SPACE\";\n    Chars[Chars[\"EXCLAMATION\"] = 33] = \"EXCLAMATION\";\n    Chars[Chars[\"DQUOTE\"] = 34] = \"DQUOTE\";\n    Chars[Chars[\"SQUOTE\"] = 39] = \"SQUOTE\";\n    Chars[Chars[\"DASH\"] = 45] = \"DASH\";\n    Chars[Chars[\"SLASH\"] = 47] = \"SLASH\";\n    Chars[Chars[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    Chars[Chars[\"LT\"] = 60] = \"LT\";\n    Chars[Chars[\"EQUALS\"] = 61] = \"EQUALS\";\n    Chars[Chars[\"GT\"] = 62] = \"GT\";\n    Chars[Chars[\"QUESTION\"] = 63] = \"QUESTION\";\n    Chars[Chars[\"UpperA\"] = 65] = \"UpperA\";\n    Chars[Chars[\"UpperZ\"] = 90] = \"UpperZ\";\n    Chars[Chars[\"LowerA\"] = 97] = \"LowerA\";\n    Chars[Chars[\"LowerZ\"] = 122] = \"LowerZ\";\n})(Chars || (Chars = {}));\nvar SPACE_CHARACTERS = new Set([\n    Chars.SPACE,\n    Chars.LF,\n    Chars.CR,\n    Chars.TAB\n]);\nvar END_OF_UNQUOTED_ATTRIBUTE_VALUE = new Set([\n    Chars.SPACE,\n    Chars.LF,\n    Chars.CR,\n    Chars.TAB,\n    Chars.GT\n]);\nfunction toUint8Array(str) {\n    var arr = new Uint8Array(str.length);\n    for(var i = 0; i < str.length; i++){\n        arr[i] = str.charCodeAt(i);\n    }\n    return arr;\n}\nvar STRINGS = {\n    UTF8_BOM: new Uint8Array([\n        0xef,\n        0xbb,\n        0xbf\n    ]),\n    UTF16LE_BOM: new Uint8Array([\n        0xff,\n        0xfe\n    ]),\n    UTF16BE_BOM: new Uint8Array([\n        0xfe,\n        0xff\n    ]),\n    UTF16LE_XML_PREFIX: new Uint8Array([\n        0x3c,\n        0x0,\n        0x3f,\n        0x0,\n        0x78,\n        0x0\n    ]),\n    UTF16BE_XML_PREFIX: new Uint8Array([\n        0x0,\n        0x3c,\n        0x0,\n        0x3f,\n        0x0,\n        0x78\n    ]),\n    XML_DECLARATION: toUint8Array(\"<?xml\"),\n    ENCODING: toUint8Array(\"encoding\"),\n    META: toUint8Array(\"meta\"),\n    HTTP_EQUIV: toUint8Array(\"http-equiv\"),\n    CONTENT: toUint8Array(\"content\"),\n    CONTENT_TYPE: toUint8Array(\"content-type\"),\n    CHARSET: toUint8Array(\"charset\"),\n    COMMENT_START: toUint8Array(\"<!--\"),\n    COMMENT_END: toUint8Array(\"-->\")\n};\nfunction isAsciiAlpha(c) {\n    return c >= Chars.UpperA && c <= Chars.UpperZ || c >= Chars.LowerA && c <= Chars.LowerZ;\n}\nfunction isQuote(c) {\n    return c === Chars.DQUOTE || c === Chars.SQUOTE;\n}\nvar Sniffer = /** @class */ function() {\n    function Sniffer(_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.maxBytes, maxBytes = _c === void 0 ? 1024 : _c, userEncoding = _b.userEncoding, transportLayerEncodingLabel = _b.transportLayerEncodingLabel, defaultEncoding = _b.defaultEncoding;\n        /** The offset of the previous buffers. */ this.offset = 0;\n        this.state = State.Begin;\n        this.sectionIndex = 0;\n        this.attribType = AttribType.None;\n        /**\n         * Indicates if the `http-equiv` is `content-type`.\n         *\n         * Initially `null`, a boolean when a value is found.\n         */ this.gotPragma = null;\n        this.needsPragma = null;\n        this.inMetaTag = false;\n        this.encoding = \"windows-1252\";\n        this.resultType = ResultType.DEFAULT;\n        this.quoteCharacter = 0;\n        this.attributeValue = [];\n        this.maxBytes = maxBytes;\n        if (userEncoding) {\n            this.setResult(userEncoding, ResultType.PASSED);\n        }\n        if (transportLayerEncodingLabel) {\n            this.setResult(transportLayerEncodingLabel, ResultType.PASSED);\n        }\n        if (defaultEncoding) {\n            this.setResult(defaultEncoding, ResultType.DEFAULT);\n        }\n    }\n    Sniffer.prototype.setResult = function(label, type) {\n        if (this.resultType === ResultType.DEFAULT || this.resultType > type) {\n            var encoding = (0,whatwg_encoding__WEBPACK_IMPORTED_MODULE_0__.labelToName)(label);\n            if (encoding) {\n                this.encoding = // Check if we are in a meta tag and the encoding is `x-user-defined`\n                type === ResultType.META_TAG && encoding === \"x-user-defined\" ? \"windows-1252\" : (type === ResultType.META_TAG || type === ResultType.XML_ENCODING) && (encoding === \"UTF-16LE\" || encoding === \"UTF-16BE\") ? \"UTF-8\" : encoding;\n                this.resultType = type;\n            }\n        }\n    };\n    Sniffer.prototype.stateBegin = function(c) {\n        switch(c){\n            case STRINGS.UTF16BE_BOM[0]:\n                {\n                    this.state = State.BOM16BE;\n                    break;\n                }\n            case STRINGS.UTF16LE_BOM[0]:\n                {\n                    this.state = State.BOM16LE;\n                    break;\n                }\n            case STRINGS.UTF8_BOM[0]:\n                {\n                    this.sectionIndex = 1;\n                    this.state = State.BOM8;\n                    break;\n                }\n            case Chars.NIL:\n                {\n                    this.state = State.UTF16BE_XML_PREFIX;\n                    this.sectionIndex = 1;\n                    break;\n                }\n            case Chars.LT:\n                {\n                    this.state = State.BeginLT;\n                    break;\n                }\n            default:\n                {\n                    this.state = State.BeforeTag;\n                }\n        }\n    };\n    Sniffer.prototype.stateBeginLT = function(c) {\n        if (c === Chars.NIL) {\n            this.state = State.UTF16LE_XML_PREFIX;\n            this.sectionIndex = 2;\n        } else if (c === Chars.QUESTION) {\n            this.state = State.XMLDeclaration;\n            this.sectionIndex = 2;\n        } else {\n            this.state = State.BeforeTagName;\n            this.stateBeforeTagName(c);\n        }\n    };\n    Sniffer.prototype.stateUTF16BE_XML_PREFIX = function(c) {\n        // Advance position in the section\n        if (this.advanceSection(STRINGS.UTF16BE_XML_PREFIX, c)) {\n            if (this.sectionIndex === STRINGS.UTF16BE_XML_PREFIX.length) {\n                // We have the whole prefix\n                this.setResult(\"utf-16be\", ResultType.XML_PREFIX);\n            }\n        } else {\n            this.state = State.BeforeTag;\n            this.stateBeforeTag(c);\n        }\n    };\n    Sniffer.prototype.stateUTF16LE_XML_PREFIX = function(c) {\n        // Advance position in the section\n        if (this.advanceSection(STRINGS.UTF16LE_XML_PREFIX, c)) {\n            if (this.sectionIndex === STRINGS.UTF16LE_XML_PREFIX.length) {\n                // We have the whole prefix\n                this.setResult(\"utf-16le\", ResultType.XML_PREFIX);\n            }\n        } else {\n            this.state = State.BeforeTag;\n            this.stateBeforeTag(c);\n        }\n    };\n    Sniffer.prototype.stateBOM16LE = function(c) {\n        if (c === STRINGS.UTF16LE_BOM[1]) {\n            this.setResult(\"utf-16le\", ResultType.BOM);\n        } else {\n            this.state = State.BeforeTag;\n            this.stateBeforeTag(c);\n        }\n    };\n    Sniffer.prototype.stateBOM16BE = function(c) {\n        if (c === STRINGS.UTF16BE_BOM[1]) {\n            this.setResult(\"utf-16be\", ResultType.BOM);\n        } else {\n            this.state = State.BeforeTag;\n            this.stateBeforeTag(c);\n        }\n    };\n    Sniffer.prototype.stateBOM8 = function(c) {\n        if (this.advanceSection(STRINGS.UTF8_BOM, c) && this.sectionIndex === STRINGS.UTF8_BOM.length) {\n            this.setResult(\"utf-8\", ResultType.BOM);\n        }\n    };\n    Sniffer.prototype.stateBeforeTag = function(c) {\n        if (c === Chars.LT) {\n            this.state = State.BeforeTagName;\n            this.inMetaTag = false;\n        }\n    };\n    /**\n     * We have seen a `<`, and now have to figure out what to do.\n     *\n     * Options:\n     *  - `<meta`\n     *  - Any other tag\n     *  - A closing tag\n     *  - `<!--`\n     *  - An XML declaration\n     *\n     */ Sniffer.prototype.stateBeforeTagName = function(c) {\n        if (isAsciiAlpha(c)) {\n            if ((c | 0x20) === STRINGS.META[0]) {\n                this.sectionIndex = 1;\n                this.state = State.TagNameMeta;\n            } else {\n                this.state = State.TagNameOther;\n            }\n        } else switch(c){\n            case Chars.SLASH:\n                {\n                    this.state = State.BeforeCloseTagName;\n                    break;\n                }\n            case Chars.EXCLAMATION:\n                {\n                    this.state = State.CommentStart;\n                    this.sectionIndex = 2;\n                    break;\n                }\n            case Chars.QUESTION:\n                {\n                    this.state = State.WeirdTag;\n                    break;\n                }\n            default:\n                {\n                    this.state = State.BeforeTag;\n                    this.stateBeforeTag(c);\n                }\n        }\n    };\n    Sniffer.prototype.stateBeforeCloseTagName = function(c) {\n        this.state = isAsciiAlpha(c) ? State.TagNameOther : State.WeirdTag;\n    };\n    Sniffer.prototype.stateCommentStart = function(c) {\n        if (this.advanceSection(STRINGS.COMMENT_START, c)) {\n            if (this.sectionIndex === STRINGS.COMMENT_START.length) {\n                this.state = State.CommentEnd;\n                // The -- of the comment start can be part of the end.\n                this.sectionIndex = 2;\n            }\n        } else {\n            this.state = State.WeirdTag;\n            this.stateWeirdTag(c);\n        }\n    };\n    Sniffer.prototype.stateCommentEnd = function(c) {\n        if (this.advanceSection(STRINGS.COMMENT_END, c)) {\n            if (this.sectionIndex === STRINGS.COMMENT_END.length) {\n                this.state = State.BeforeTag;\n            }\n        } else if (c === Chars.DASH) {\n            /*\n             * If we are here, we know we expected a `>` above.\n             * Set this to 2, to support many dashes before the closing `>`.\n             */ this.sectionIndex = 2;\n        }\n    };\n    /**\n     * Any section starting with `<!`, `<?`, `</`, without being a closing tag or comment.\n     */ Sniffer.prototype.stateWeirdTag = function(c) {\n        if (c === Chars.GT) {\n            this.state = State.BeforeTag;\n        }\n    };\n    /**\n     * Advances the section, ignoring upper/lower case.\n     *\n     * Make sure the section has left-over characters before calling.\n     *\n     * @returns `false` if we did not match the section.\n     */ Sniffer.prototype.advanceSectionIC = function(section, c) {\n        return this.advanceSection(section, c | 0x20);\n    };\n    /**\n     * Advances the section.\n     *\n     * Make sure the section has left-over characters before calling.\n     *\n     * @returns `false` if we did not match the section.\n     */ Sniffer.prototype.advanceSection = function(section, c) {\n        if (section[this.sectionIndex] === c) {\n            this.sectionIndex++;\n            return true;\n        }\n        this.sectionIndex = 0;\n        return false;\n    };\n    Sniffer.prototype.stateTagNameMeta = function(c) {\n        if (this.sectionIndex < STRINGS.META.length) {\n            if (this.advanceSectionIC(STRINGS.META, c)) {\n                return;\n            }\n        } else if (SPACE_CHARACTERS.has(c)) {\n            this.inMetaTag = true;\n            this.gotPragma = null;\n            this.needsPragma = null;\n            this.state = State.BeforeAttribute;\n            return;\n        }\n        this.state = State.TagNameOther;\n        // Reconsume in case there is a `>`.\n        this.stateTagNameOther(c);\n    };\n    Sniffer.prototype.stateTagNameOther = function(c) {\n        if (SPACE_CHARACTERS.has(c)) {\n            this.state = State.BeforeAttribute;\n        } else if (c === Chars.GT) {\n            this.state = State.BeforeTag;\n        }\n    };\n    Sniffer.prototype.stateBeforeAttribute = function(c) {\n        if (SPACE_CHARACTERS.has(c)) return;\n        if (this.inMetaTag) {\n            var lower = c | 0x20;\n            if (lower === STRINGS.HTTP_EQUIV[0]) {\n                this.sectionIndex = 1;\n                this.state = State.MetaAttribHttpEquiv;\n                return;\n            } else if (lower === STRINGS.CHARSET[0]) {\n                this.sectionIndex = 1;\n                this.state = State.MetaAttribC;\n                return;\n            }\n        }\n        this.state = c === Chars.SLASH || c === Chars.GT ? State.BeforeTag : State.AnyAttribName;\n    };\n    Sniffer.prototype.handleMetaAttrib = function(c, section, type) {\n        if (this.advanceSectionIC(section, c)) {\n            if (this.sectionIndex === section.length) {\n                this.attribType = type;\n                this.state = State.MetaAttribAfterName;\n            }\n        } else {\n            this.state = State.AnyAttribName;\n            this.stateAnyAttribName(c);\n        }\n    };\n    Sniffer.prototype.stateMetaAttribHttpEquiv = function(c) {\n        this.handleMetaAttrib(c, STRINGS.HTTP_EQUIV, AttribType.HttpEquiv);\n    };\n    Sniffer.prototype.stateMetaAttribC = function(c) {\n        var lower = c | 0x20;\n        if (lower === STRINGS.CHARSET[1]) {\n            this.sectionIndex = 2;\n            this.state = State.MetaAttribCharset;\n        } else if (lower === STRINGS.CONTENT[1]) {\n            this.sectionIndex = 2;\n            this.state = State.MetaAttribContent;\n        } else {\n            this.state = State.AnyAttribName;\n            this.stateAnyAttribName(c);\n        }\n    };\n    Sniffer.prototype.stateMetaAttribCharset = function(c) {\n        this.handleMetaAttrib(c, STRINGS.CHARSET, AttribType.Charset);\n    };\n    Sniffer.prototype.stateMetaAttribContent = function(c) {\n        this.handleMetaAttrib(c, STRINGS.CONTENT, AttribType.Content);\n    };\n    Sniffer.prototype.stateMetaAttribAfterName = function(c) {\n        if (SPACE_CHARACTERS.has(c) || c === Chars.EQUALS) {\n            this.state = State.AfterAttributeName;\n            this.stateAfterAttributeName(c);\n        } else {\n            this.state = State.AnyAttribName;\n            this.stateAnyAttribName(c);\n        }\n    };\n    Sniffer.prototype.stateAnyAttribName = function(c) {\n        if (SPACE_CHARACTERS.has(c)) {\n            this.attribType = AttribType.None;\n            this.state = State.AfterAttributeName;\n        } else if (c === Chars.SLASH || c === Chars.GT) {\n            this.state = State.BeforeTag;\n        } else if (c === Chars.EQUALS) {\n            this.state = State.BeforeAttributeValue;\n        }\n    };\n    Sniffer.prototype.stateAfterAttributeName = function(c) {\n        if (SPACE_CHARACTERS.has(c)) return;\n        if (c === Chars.EQUALS) {\n            this.state = State.BeforeAttributeValue;\n        } else {\n            this.state = State.BeforeAttribute;\n            this.stateBeforeAttribute(c);\n        }\n    };\n    Sniffer.prototype.stateBeforeAttributeValue = function(c) {\n        if (SPACE_CHARACTERS.has(c)) return;\n        this.attributeValue.length = 0;\n        this.sectionIndex = 0;\n        if (isQuote(c)) {\n            this.quoteCharacter = c;\n            this.state = this.attribType === AttribType.Content ? State.MetaContentValueQuotedBeforeEncoding : this.attribType === AttribType.HttpEquiv ? State.MetaAttribHttpEquivValue : State.AttributeValueQuoted;\n        } else if (this.attribType === AttribType.Content) {\n            this.state = State.MetaContentValueUnquotedBeforeEncoding;\n            this.stateMetaContentValueUnquotedBeforeEncoding(c);\n        } else if (this.attribType === AttribType.HttpEquiv) {\n            // We use `quoteCharacter = 0` to signify that the value is unquoted.\n            this.quoteCharacter = 0;\n            this.sectionIndex = 0;\n            this.state = State.MetaAttribHttpEquivValue;\n            this.stateMetaAttribHttpEquivValue(c);\n        } else {\n            this.state = State.AttributeValueUnquoted;\n            this.stateAttributeValueUnquoted(c);\n        }\n    };\n    // The value has to be `content-type`\n    Sniffer.prototype.stateMetaAttribHttpEquivValue = function(c) {\n        if (this.sectionIndex === STRINGS.CONTENT_TYPE.length) {\n            if (this.quoteCharacter === 0 ? END_OF_UNQUOTED_ATTRIBUTE_VALUE.has(c) : c === this.quoteCharacter) {\n                if (this.needsPragma !== null) {\n                    this.setResult(this.needsPragma, ResultType.META_TAG);\n                } else if (this.gotPragma === null) {\n                    this.gotPragma = true;\n                }\n                this.state = State.BeforeAttribute;\n                return;\n            }\n        } else if (this.advanceSectionIC(STRINGS.CONTENT_TYPE, c)) {\n            return;\n        }\n        this.gotPragma = false;\n        if (this.quoteCharacter === 0) {\n            this.state = State.AttributeValueUnquoted;\n            this.stateAttributeValueUnquoted(c);\n        } else {\n            this.state = State.AttributeValueQuoted;\n            this.stateAttributeValueQuoted(c);\n        }\n    };\n    Sniffer.prototype.handleMetaContentValue = function() {\n        if (this.attributeValue.length === 0) return;\n        var encoding = String.fromCharCode.apply(String, this.attributeValue);\n        if (this.gotPragma) {\n            this.setResult(encoding, ResultType.META_TAG);\n        } else if (this.needsPragma === null) {\n            // Don't override a previous result.\n            this.needsPragma = encoding;\n        }\n        this.attributeValue.length = 0;\n    };\n    Sniffer.prototype.handleAttributeValue = function() {\n        if (this.attribType === AttribType.Charset) {\n            this.setResult(String.fromCharCode.apply(String, this.attributeValue), ResultType.META_TAG);\n        }\n    };\n    Sniffer.prototype.stateAttributeValueUnquoted = function(c) {\n        if (SPACE_CHARACTERS.has(c)) {\n            this.handleAttributeValue();\n            this.state = State.BeforeAttribute;\n        } else if (c === Chars.SLASH || c === Chars.GT) {\n            this.handleAttributeValue();\n            this.state = State.BeforeTag;\n        } else if (this.attribType === AttribType.Charset) {\n            this.attributeValue.push(c | 0x20);\n        }\n    };\n    Sniffer.prototype.findMetaContentEncoding = function(c) {\n        if (this.advanceSectionIC(STRINGS.CHARSET, c)) {\n            if (this.sectionIndex === STRINGS.CHARSET.length) {\n                return true;\n            }\n        } else {\n            // If we encountered another `c`, assume we started over.\n            this.sectionIndex = Number(c === STRINGS.CHARSET[0]);\n        }\n        return false;\n    };\n    Sniffer.prototype.stateMetaContentValueUnquotedBeforeEncoding = function(c) {\n        if (END_OF_UNQUOTED_ATTRIBUTE_VALUE.has(c)) {\n            this.stateAttributeValueUnquoted(c);\n        } else if (this.sectionIndex === STRINGS.CHARSET.length) {\n            if (c === Chars.EQUALS) {\n                this.state = State.MetaContentValueUnquotedBeforeValue;\n            }\n        } else {\n            this.findMetaContentEncoding(c);\n        }\n    };\n    Sniffer.prototype.stateMetaContentValueUnquotedBeforeValue = function(c) {\n        if (isQuote(c)) {\n            this.quoteCharacter = c;\n            this.state = State.MetaContentValueUnquotedValueQuoted;\n        } else if (END_OF_UNQUOTED_ATTRIBUTE_VALUE.has(c)) {\n            // Can't have spaces here, as it would no longer be part of the attribute value.\n            this.stateAttributeValueUnquoted(c);\n        } else {\n            this.state = State.MetaContentValueUnquotedValueUnquoted;\n            this.stateMetaContentValueUnquotedValueUnquoted(c);\n        }\n    };\n    Sniffer.prototype.stateMetaContentValueUnquotedValueQuoted = function(c) {\n        if (END_OF_UNQUOTED_ATTRIBUTE_VALUE.has(c)) {\n            // Quotes weren't matched, so we're done.\n            this.stateAttributeValueUnquoted(c);\n        } else if (c === this.quoteCharacter) {\n            this.handleMetaContentValue();\n            this.state = State.AttributeValueUnquoted;\n        } else {\n            this.attributeValue.push(c | 0x20);\n        }\n    };\n    Sniffer.prototype.stateMetaContentValueUnquotedValueUnquoted = function(c) {\n        if (END_OF_UNQUOTED_ATTRIBUTE_VALUE.has(c) || c === Chars.SEMICOLON) {\n            this.handleMetaContentValue();\n            this.state = State.AttributeValueUnquoted;\n            this.stateAttributeValueUnquoted(c);\n        } else {\n            this.attributeValue.push(c | 0x20);\n        }\n    };\n    Sniffer.prototype.stateMetaContentValueQuotedValueUnquoted = function(c) {\n        if (isQuote(c) || SPACE_CHARACTERS.has(c) || c === Chars.SEMICOLON) {\n            this.handleMetaContentValue();\n            // We are done with the value, but might not be at the end of the attribute\n            this.state = State.AttributeValueQuoted;\n            this.stateAttributeValueQuoted(c);\n        } else {\n            this.attributeValue.push(c | 0x20);\n        }\n    };\n    Sniffer.prototype.stateMetaContentValueQuotedValueQuoted = function(c) {\n        if (isQuote(c)) {\n            // We have reached the end of our value.\n            if (c !== this.quoteCharacter) {\n                // Only handle the value if inner quotes were matched.\n                this.handleMetaContentValue();\n            }\n            this.state = State.AttributeValueQuoted;\n            this.stateAttributeValueQuoted(c);\n        } else {\n            this.attributeValue.push(c | 0x20);\n        }\n    };\n    Sniffer.prototype.stateMetaContentValueQuotedBeforeEncoding = function(c) {\n        if (c === this.quoteCharacter) {\n            this.stateAttributeValueQuoted(c);\n        } else if (this.findMetaContentEncoding(c)) {\n            this.state = State.MetaContentValueQuotedAfterEncoding;\n        }\n    };\n    Sniffer.prototype.stateMetaContentValueQuotedAfterEncoding = function(c) {\n        if (c === Chars.EQUALS) {\n            this.state = State.MetaContentValueQuotedBeforeValue;\n        } else if (!SPACE_CHARACTERS.has(c)) {\n            // Look for the next encoding\n            this.state = State.MetaContentValueQuotedBeforeEncoding;\n            this.stateMetaContentValueQuotedBeforeEncoding(c);\n        }\n    };\n    Sniffer.prototype.stateMetaContentValueQuotedBeforeValue = function(c) {\n        if (c === this.quoteCharacter) {\n            this.stateAttributeValueQuoted(c);\n        } else if (isQuote(c)) {\n            this.state = State.MetaContentValueQuotedValueQuoted;\n        } else if (!SPACE_CHARACTERS.has(c)) {\n            this.state = State.MetaContentValueQuotedValueUnquoted;\n            this.stateMetaContentValueQuotedValueUnquoted(c);\n        }\n    };\n    Sniffer.prototype.stateAttributeValueQuoted = function(c) {\n        if (c === this.quoteCharacter) {\n            this.handleAttributeValue();\n            this.state = State.BeforeAttribute;\n        } else if (this.attribType === AttribType.Charset) {\n            this.attributeValue.push(c | 0x20);\n        }\n    };\n    // Read STRINGS.XML_DECLARATION\n    Sniffer.prototype.stateXMLDeclaration = function(c) {\n        if (this.advanceSection(STRINGS.XML_DECLARATION, c)) {\n            if (this.sectionIndex === STRINGS.XML_DECLARATION.length) {\n                this.sectionIndex = 0;\n                this.state = State.XMLDeclarationBeforeEncoding;\n            }\n        } else {\n            this.state = State.WeirdTag;\n        }\n    };\n    Sniffer.prototype.stateXMLDeclarationBeforeEncoding = function(c) {\n        if (this.advanceSection(STRINGS.ENCODING, c)) {\n            if (this.sectionIndex === STRINGS.ENCODING.length) {\n                this.state = State.XMLDeclarationAfterEncoding;\n            }\n        } else if (c === Chars.GT) {\n            this.state = State.BeforeTag;\n        } else {\n            // If we encountered another `c`, assume we started over.\n            this.sectionIndex = Number(c === STRINGS.ENCODING[0]);\n        }\n    };\n    Sniffer.prototype.stateXMLDeclarationAfterEncoding = function(c) {\n        if (c === Chars.EQUALS) {\n            this.state = State.XMLDeclarationBeforeValue;\n        } else if (c > Chars.SPACE) {\n            this.state = State.WeirdTag;\n            this.stateWeirdTag(c);\n        }\n    };\n    Sniffer.prototype.stateXMLDeclarationBeforeValue = function(c) {\n        if (isQuote(c)) {\n            this.attributeValue.length = 0;\n            this.state = State.XMLDeclarationValue;\n        } else if (c > Chars.SPACE) {\n            this.state = State.WeirdTag;\n            this.stateWeirdTag(c);\n        }\n    };\n    Sniffer.prototype.stateXMLDeclarationValue = function(c) {\n        if (isQuote(c)) {\n            this.setResult(String.fromCharCode.apply(String, this.attributeValue), ResultType.XML_ENCODING);\n            this.state = State.WeirdTag;\n        } else if (c === Chars.GT) {\n            this.state = State.BeforeTag;\n        } else if (c <= Chars.SPACE) {\n            this.state = State.WeirdTag;\n        } else {\n            this.attributeValue.push(c | 0x20);\n        }\n    };\n    Sniffer.prototype.write = function(buffer) {\n        var index = 0;\n        for(; index < buffer.length && this.offset + index < this.maxBytes; index++){\n            var c = buffer[index];\n            switch(this.state){\n                case State.Begin:\n                    {\n                        this.stateBegin(c);\n                        break;\n                    }\n                case State.BOM16BE:\n                    {\n                        this.stateBOM16BE(c);\n                        break;\n                    }\n                case State.BOM16LE:\n                    {\n                        this.stateBOM16LE(c);\n                        break;\n                    }\n                case State.BOM8:\n                    {\n                        this.stateBOM8(c);\n                        break;\n                    }\n                case State.UTF16LE_XML_PREFIX:\n                    {\n                        this.stateUTF16LE_XML_PREFIX(c);\n                        break;\n                    }\n                case State.BeginLT:\n                    {\n                        this.stateBeginLT(c);\n                        break;\n                    }\n                case State.UTF16BE_XML_PREFIX:\n                    {\n                        this.stateUTF16BE_XML_PREFIX(c);\n                        break;\n                    }\n                case State.BeforeTag:\n                    {\n                        // Optimization: Skip all characters until we find a `<`\n                        var idx = buffer.indexOf(Chars.LT, index);\n                        if (idx < 0) {\n                            // We are done with this buffer. Stay in the state and try on the next one.\n                            index = buffer.length;\n                        } else {\n                            index = idx;\n                            this.stateBeforeTag(Chars.LT);\n                        }\n                        break;\n                    }\n                case State.BeforeTagName:\n                    {\n                        this.stateBeforeTagName(c);\n                        break;\n                    }\n                case State.BeforeCloseTagName:\n                    {\n                        this.stateBeforeCloseTagName(c);\n                        break;\n                    }\n                case State.CommentStart:\n                    {\n                        this.stateCommentStart(c);\n                        break;\n                    }\n                case State.CommentEnd:\n                    {\n                        this.stateCommentEnd(c);\n                        break;\n                    }\n                case State.TagNameMeta:\n                    {\n                        this.stateTagNameMeta(c);\n                        break;\n                    }\n                case State.TagNameOther:\n                    {\n                        this.stateTagNameOther(c);\n                        break;\n                    }\n                case State.XMLDeclaration:\n                    {\n                        this.stateXMLDeclaration(c);\n                        break;\n                    }\n                case State.XMLDeclarationBeforeEncoding:\n                    {\n                        this.stateXMLDeclarationBeforeEncoding(c);\n                        break;\n                    }\n                case State.XMLDeclarationAfterEncoding:\n                    {\n                        this.stateXMLDeclarationAfterEncoding(c);\n                        break;\n                    }\n                case State.XMLDeclarationBeforeValue:\n                    {\n                        this.stateXMLDeclarationBeforeValue(c);\n                        break;\n                    }\n                case State.XMLDeclarationValue:\n                    {\n                        this.stateXMLDeclarationValue(c);\n                        break;\n                    }\n                case State.WeirdTag:\n                    {\n                        this.stateWeirdTag(c);\n                        break;\n                    }\n                case State.BeforeAttribute:\n                    {\n                        this.stateBeforeAttribute(c);\n                        break;\n                    }\n                case State.MetaAttribHttpEquiv:\n                    {\n                        this.stateMetaAttribHttpEquiv(c);\n                        break;\n                    }\n                case State.MetaAttribHttpEquivValue:\n                    {\n                        this.stateMetaAttribHttpEquivValue(c);\n                        break;\n                    }\n                case State.MetaAttribC:\n                    {\n                        this.stateMetaAttribC(c);\n                        break;\n                    }\n                case State.MetaAttribContent:\n                    {\n                        this.stateMetaAttribContent(c);\n                        break;\n                    }\n                case State.MetaAttribCharset:\n                    {\n                        this.stateMetaAttribCharset(c);\n                        break;\n                    }\n                case State.MetaAttribAfterName:\n                    {\n                        this.stateMetaAttribAfterName(c);\n                        break;\n                    }\n                case State.MetaContentValueQuotedBeforeEncoding:\n                    {\n                        this.stateMetaContentValueQuotedBeforeEncoding(c);\n                        break;\n                    }\n                case State.MetaContentValueQuotedAfterEncoding:\n                    {\n                        this.stateMetaContentValueQuotedAfterEncoding(c);\n                        break;\n                    }\n                case State.MetaContentValueQuotedBeforeValue:\n                    {\n                        this.stateMetaContentValueQuotedBeforeValue(c);\n                        break;\n                    }\n                case State.MetaContentValueQuotedValueQuoted:\n                    {\n                        this.stateMetaContentValueQuotedValueQuoted(c);\n                        break;\n                    }\n                case State.MetaContentValueQuotedValueUnquoted:\n                    {\n                        this.stateMetaContentValueQuotedValueUnquoted(c);\n                        break;\n                    }\n                case State.MetaContentValueUnquotedBeforeEncoding:\n                    {\n                        this.stateMetaContentValueUnquotedBeforeEncoding(c);\n                        break;\n                    }\n                case State.MetaContentValueUnquotedBeforeValue:\n                    {\n                        this.stateMetaContentValueUnquotedBeforeValue(c);\n                        break;\n                    }\n                case State.MetaContentValueUnquotedValueQuoted:\n                    {\n                        this.stateMetaContentValueUnquotedValueQuoted(c);\n                        break;\n                    }\n                case State.MetaContentValueUnquotedValueUnquoted:\n                    {\n                        this.stateMetaContentValueUnquotedValueUnquoted(c);\n                        break;\n                    }\n                case State.AnyAttribName:\n                    {\n                        this.stateAnyAttribName(c);\n                        break;\n                    }\n                case State.AfterAttributeName:\n                    {\n                        this.stateAfterAttributeName(c);\n                        break;\n                    }\n                case State.BeforeAttributeValue:\n                    {\n                        this.stateBeforeAttributeValue(c);\n                        break;\n                    }\n                case State.AttributeValueQuoted:\n                    {\n                        this.stateAttributeValueQuoted(c);\n                        break;\n                    }\n                default:\n                    {\n                        // (State.AttributeValueUnquoted)\n                        this.stateAttributeValueUnquoted(c);\n                    }\n            }\n        }\n        this.offset += index;\n    };\n    return Sniffer;\n}();\n\n/** Get the encoding for the passed buffer. */ function getEncoding(buffer, options) {\n    var sniffer = new Sniffer(options);\n    sniffer.write(buffer);\n    return sniffer.encoding;\n} //# sourceMappingURL=sniffer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/encoding-sniffer/dist/esm/sniffer.js\n");

/***/ })

};
;